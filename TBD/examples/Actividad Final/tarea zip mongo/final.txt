//CREAR LA BASE DE DATOS JUEGOS
use juegos;

// CREAR LA COLLECION JUEGOS
db.createCollection("juegos");

// Insertar los datos iniciales para un tablero de 3 en raya si no existe
if (db.juegos.countDocuments({_id: 1}) === 0) {
    db.juegos.insertOne({
        _id: 1,
        tablero: [
            ["", "", ""],
            ["", "", ""],
            ["", "", ""]
        ],
        jugadorActual: "X",
        ganador: null,
        empate: false
    });
} else {
    reiniciarJuego(1);
}

// Función para imprimir el tablero
function imprimirTablero(juego) {
    juego.tablero.forEach((fila, index) => {
        print(fila.join(" | "));
        if (index < 2) print("---------");
    });
}

// Función para hacer cada movimiento
function hacerMovimiento(juegoId, fila, col) {
    var juego = db.juegos.findOne({_id: juegoId});
    
    if (juego.tablero[fila][col] !== "" || juego.ganador || juego.empate) {
        print("Movimiento inválido o el juego ya ha terminado.");
        return;
    }

    juego.tablero[fila][col] = juego.jugadorActual;
    juego.jugadorActual = juego.jugadorActual === "X" ? "O" : "X";

    db.juegos.updateOne({_id: juegoId}, {$set: {tablero: juego.tablero, jugadorActual: juego.jugadorActual}});
    
    imprimirTablero(juego);
    actualizarEstadoJuego(juegoId); // Actualizar el estado del juego después de cada movimiento
}

// Función para verificar el ganador
function verificarGanador(juegoId) {
    var juego = db.juegos.findOne({_id: juegoId});
    var tablero = juego.tablero;

    // Comprobación de filas, columnas y diagonales
    for (var i = 0; i < 3; i++) {
        if (tablero[i][0] && tablero[i][0] === tablero[i][1] && tablero[i][1] === tablero[i][2]) {
            return tablero[i][0];
        }
        if (tablero[0][i] && tablero[0][i] === tablero[1][i] && tablero[1][i] === tablero[2][i]) {
            return tablero[0][i];
        }
    }

    if (tablero[0][0] && tablero[0][0] === tablero[1][1] && tablero[1][1] === tablero[2][2]) {
        return tablero[0][0];
    }
    if (tablero[0][2] && tablero[0][2] === tablero[1][1] && tablero[1][1] === tablero[2][0]) {
        return tablero[0][2];
    }

    return null;
}

// Función para verificar si hay un empate
function verificarEmpate(juegoId) {
    var juego = db.juegos.findOne({_id: juegoId});
    var tablero = juego.tablero;

    for (var i = 0; i < 3; i++) {
        for (var j = 0; j < 3; j++) {
            if (tablero[i][j] === "") {
                return false;
            }
        }
    }

    return true;
}

// Actualización del estado del juego con el ganador o empate

function actualizarEstadoJuego(juegoId) {
    var ganador = verificarGanador(juegoId);
    if (ganador) {
        db.juegos.updateOne({_id: juegoId}, {$set: {ganador: ganador}});
        print("¡El ganador es " + ganador + "! ¡Felicidades!");
    } else if (verificarEmpate(juegoId)) {
        db.juegos.updateOne({_id: juegoId}, {$set: {empate: true}});
        print("¡El juego es un empate!");
    } else {
        print("No hay ganador aún.");
    }
}

// Función para reiniciar el juego
function reiniciarJuego(juegoId) {
    db.juegos.updateOne(
        {_id: juegoId},
        {$set: {
            tablero: [
                ["", "", ""],
                ["", "", ""],
                ["", "", ""]
            ],
            jugadorActual: "X",
            ganador: null,
            empate: false
        }}
    );
    print("El juego ha sido reiniciado.");
}

// Simulación asegurando un ganador:
print("Simulación asegurando un ganador:");

// Turno del jugador X
hacerMovimiento(1, 0, 0);
// Turno del jugador O
hacerMovimiento(1, 1, 0);
// Turno del jugador X
hacerMovimiento(1, 0, 1);
// Turno del jugador O
hacerMovimiento(1, 1, 1);
// Turno del jugador X
hacerMovimiento(1, 0, 2);

// El jugador X debe ganar aquí (completando la fila superior)
actualizarEstadoJuego(1);

// Reiniciar el juego para futuras partidas si se desea
reiniciarJuego(1);




Explicación:
Movimientos Realizados:

X toma las posiciones (0,0), (0,1), y (0,2).
O toma las posiciones (1,0) y (1,1).
Esto asegura que X complete una fila y gane el juego.
Actualización del Estado del Juego:

Después de cada movimiento, se llama a actualizarEstadoJuego para verificar si hay un ganador o un empate.
Reinicio del Juego:

Al final de la simulación, se llama a reiniciarJuego para preparar el juego para una nueva partida si se desea continuar jugando.
Con este script, se garantiza que el jugador X gane el juego completando la fila superior, mostrando el mensaje de victoria correspondiente.

